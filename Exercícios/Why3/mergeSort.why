theory MergeSort

  use int.Int
  use list.List
  use list.Length
  use list.Permut
  use list.Append


  function split (l :list int) : (list int, list int) =
    match l with
    | Nil -> (Nil, Nil)
    | Cons x Nil -> (Cons x Nil, Nil)
    | Cons x1 (Cons x2 l') -> let (l1, l2) = split l'
                              in (Cons x1 l1, Cons x2 l2)
    end 


  let rec lemma split_lm (l :list int) : () 
    ensures { let (l1,l2) = split l in length l < 2 \/ (length l >= 2 /\ length l1 < length l /\ length l2 < length l) }
    ensures { let (l1,l2) = split l in permut l (l1 ++ l2) }
  = match l with
    | Nil -> ()
    | Cons _ Nil -> ()
    | Cons _ (Cons _ l') -> split_lm l'
    end 


  use list.SortedInt

  function merge (l1 l2 :list int) : list int =
    match l1, l2 with
    | Nil, _ -> l2
    | _, Nil -> l1
    | (Cons a1 l1'), (Cons a2 l2') -> if a1 <= a2
                                      then (Cons a1 (merge l1' l2))
                                      else (Cons a2 (merge l1 l2'))
    end



  let rec lemma merge_lm (l1 l2 :list int) : ()
    requires { sorted l1 /\ sorted l2  }
    ensures { sorted (merge l1 l2) }
    ensures { permut (l1 ++ l2) (merge l1 l2) }
  = match l1, l2 with
    | Nil, _ -> ()
    | _, Nil -> ()
    | (Cons a1 l1'), (Cons a2 l2') -> if a1 <= a2
                                      then merge_lm l1' l2
                                      else merge_lm l1 l2'
    end



  let rec ghost function mergesort (l :list int) : list int 
    variant { length l }
  = match l with 
    | Nil -> Nil
    | Cons x Nil -> Cons x Nil
    | _ ->   let (l1,l2) = split l
     	     in  merge (mergesort l1) (mergesort l2)
    end



  let rec lemma mergesort_lm (l :list int) : ()
    ensures { sorted (mergesort l) }
    ensures { permut l (mergesort l) } 
    variant { length l }
  =
    match l with 
    | Nil -> ()
    | Cons _ Nil -> ()
    | _ ->   let (l1,l2) = split l 
             in assert { permut l (l1 ++ l2) } ; mergesort_lm l1 ; mergesort_lm l2 ; assert { permut l (mergesort l1 ++ mergesort l2) } 
    end


end