

module Bintree_insert

  use  int.Int

     

  type tree 'a = Empty | Node (tree 'a) 'a (tree 'a)
                                     

  let rec function size (t : tree int) : int =
    match t with 
      | Empty -> 0
      | Node t1 a t2 -> 1 + size t1 + size t2
    end


  let rec ghost function sortedBT (t : tree int)
    variant { t }
    = match t with
      | Empty -> true
      | Node (Empty) a (Empty) -> true
      | Node (Node t11 a1 t12) a (Node t21 a2 t22) -> if a1 <= a <= a2
                                                      then sortedBT (Node t11 a1 t12) && sortedBT (Node t21 a2 t22)
                                                      else false
    end 


  let rec function memt (t: tree int) (x: int) : bool
    = match t with
      | Empty -> false
      | Node t1 a t2 -> if x = a 
                        then true 
                        else memt t1 x || memt t2 x
    end

  let rec function num_occ (x : int) (t : tree int)
    = match t with 
      | Empty -> 0
      | Node t1 a t2 -> if a = x 
                        then 1 + num_occ x t1 + num_occ x t2
                        else num_occ x t1 + num_occ x t2
    end


  let rec function add (t : tree int) (v : int) : tree int =
    requires { sortedBT t }
    ensures  { sortedBT result }
    ensures  { size result = size t + 1 } 
    ensures  { forall x : int. memt result x <-> (memt t x \/ x = v) }
    ensures  { forall x : int. num_occ x result =
                               if x = v then 1 + num_occ x t else num_occ x t }
    variant { t }
    match t with
     | Empty -> Node (Empty) v (Empty)
     | Node t1 x t2 ->
       if v <= x then Node (add t1 v) x t2 else Node t1 x (add t2 v)
    end


               
end

